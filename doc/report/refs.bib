@manual{foreskrifter,
    author = {Eva Albers},
    title = {Föreskrift för kandidatarbete på Chalmers - genomförande och examination},
    year = {2022},
    month = {08},
    note = {Diarienummer: C 2022-0943}
}

@online{google_vulnerability_disclosure,
    author = {Google Project Zero},
    title = {{How Google handles security vulnerabilities}},
    year = {2022},
    url = {https://googleprojectzero.blogspot.com/p/vulnerability-disclosure-policy.html},
    urldate = {2023-02-10},
}

@article{symqemu,
    title={SymQEMU: Compilation-based symbolic execution for binaries},
    author={Sebastian Poeplau and Aur{\'e}lien Francillon},
    journal={Proceedings 2021 Network and Distributed System Security Symposium},
    year={2021}
}

@article{symbexec,
    author = {Cadar, Cristian and Sen, Koushik},
    title = {Symbolic Execution for Software Testing: Three Decades Later},
    year = {2013},
    issue_date = {February 2013},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {56},
    number = {2},
    issn = {0001-0782},
    url = {https://doi.org/10.1145/2408776.2408795},
    doi = {10.1145/2408776.2408795},
    abstract = {The challenges---and great promise---of modern symbolic execution techniques, and the tools to help implement them.},
    journal = {Commun. ACM},
    month = {feb},
    pages = {82–90},
    numpages = {9}
}

@inproceedings{s2e,
    author = {Chipounov, Vitaly and Kuznetsov, Volodymyr and Candea, George},
    title = {{S2E: A Platform for in-Vivo Multi-Path Analysis of Software Systems}},
    date = {2011},
    isbn = {9781450302661},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1950365.1950396},
    doi = {10.1145/1950365.1950396},
    booktitle = {Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems},
    pages = {265–278},
    numpages = {14},
    keywords = {testing, analysis, virtualization, dbt, performance, symbolic execution, framework, binary, in-vivo, consistency models},
    location = {Newport Beach, California, USA},
    series = {ASPLOS XVI}
}

@article{Chipounov12,
    author = {Chipounov, Vitaly and Kuznetsov, Volodymyr and Candea, George},
    title = {The S2E Platform: Design, Implementation, and Applications},
    date = {2012-02},
    issue_date = {February 2012},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {30},
    number = {1},
    issn = {0734-2071},
    url = {https://doi.org/10.1145/2110356.2110358},
    doi = {10.1145/2110356.2110358},
    journal = {ACM Trans. Comput. Syst.},
    articleno = {2},
    numpages = {49},
    keywords = {profiling, analysis, Symbolic execution, testing}
}

@inproceedings {xforce,
author = {Fei Peng and Zhui Deng and Xiangyu Zhang and Dongyan Xu and Zhiqiang Lin and Zhendong Su},
title = {{X-Force}: {Force-Executing} Binary Programs for Security Applications},
booktitle = {23rd USENIX Security Symposium (USENIX Security 14)},
year = {2014},
isbn = {978-1-931971-15-7},
address = {San Diego, CA},
pages = {829--844},
url = {https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/peng},
publisher = {USENIX Association},
month = aug,
}

@inproceedings {aflplusplus,
    author = {Andrea Fioraldi and Dominik Maier and Heiko Ei{\ss}feldt and Marc Heuse},
    title = {{AFL++} : Combining Incremental Steps of Fuzzing Research},
    booktitle = {14th USENIX Workshop on Offensive Technologies (WOOT 20)},
    year = {2020},
    url = {https://www.usenix.org/conference/woot20/presentation/fioraldi},
    publisher = {USENIX Association},
    month = aug,
}


@book{andriesse2018,
    author = {Andriesse, Dennis},
    title = {{Practical Binary Analysis}},
    year = {2018},
    month = {12},
    publisher = {No Starch Press},
    isbn = {9781593279127}
}

@inproceedings{klee,
    author = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
    title = {{KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs}},
    year = {2008},
    publisher = {USENIX Association},
    address = {USA},
    booktitle = {Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation},
    pages = {209–224},
    numpages = {16},
    location = {San Diego, California},
    series = {OSDI'08}
}

@online{s2e_website,
    author = {Chipounov, Vitaly},
    title = {{\stoe: A Platform for In-Vivo Analysis of Software Systems}},
    date = {2017-02-24},
    url = {https://s2e.systems/},
    urldate = {2023-02-10}
}

@online{ghidra_website,
    title = {Gidra - A software reverse engineering (SRE) suite of tools developed by NSA's Research Directorate in support of the Cybersecurity mission},
    year = 2023,
    url = {https://ghidra-sre.org/},
    urldate = {2023-03-23}
}

@online{hex_rays,
    title = {Hex Rays hemsida},
    url = {https://hex-rays.com/},
    urldate = {2023-04-27}
}

@online{binary_ninja,
    title = {Vector 35s hemsida},
    url = {https://binary.ninja/},
    urldate = {2023-04-27}
}

@article{ghidra_use_cases,
    author = {Messier, Ric and Berninger, Matthew},
    title = {Getting Started with Ghidra by Ric Messier, Matthew Berninger},
    journal = {O’Reilly Media, Inc},
    year = {2023},
    url = {https://www.oreilly.com/library/view/getting-started-with/9781098115265/ch01.html},
    urldate = {2023-03-23}
}

@online{ghidra_script,
    author = {Marco Ivaldi},
    title = {Automating binary vulnerability discovery with Ghidra and Semgrep},
    month = {July},
    year = {2022},
    url = {https://security.humanativaspa.it/automating-binary-vulnerability-discovery-with-ghidra-and-semgrep/},
    urldate = {2023-03-23}
}

@online{angr_web,
    title = {Angr homepage},
    author = {
            Shoshitaishvili, Yan and
            Wang, Ruoyu and
            Dutcher, Audrey and
            Dresel, Lukas and
            Gustafson, Eric and
            Redini, Nilo and
            Grosen, Paul and
            Unger, Colin and
            Salls, Chris and
            Stephens, Nick and
            Hauser, Christophe and
            Grosen, John},
    url = {https://angr.io/},
    year = 2023,
    urldate = {2023-03-23}
}

@online{angr_docs,
    title = {angr Documentation},
    author = {
            Shoshitaishvili, Yan and
            Wang, Ruoyu and
            Dutcher, Audrey and
            Dresel, Lukas and
            Gustafson, Eric and
            Redini, Nilo and
            Grosen, Paul and
            Unger, Colin and
            Salls, Chris and
            Stephens, Nick and
            Hauser, Christophe and
            Grosen, John},
    date = 2022,
    url = {https://docs.angr.io/},
    urldate = {2023-03-23}
}

@techreport{dynamic_bin_analysis,
    author = {Nethercote, Nicholas},
    title = {{Dynamic binary analysis and instrumentation}},
    year = 2004,
    month = nov,
    url = {https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-606.pdf},
    institution = {University of Cambridge, Computer Laboratory},
    doi = {10.48456/tr-606},
    number = {UCAM-CL-TR-606}
}

@report{cyberreason2021,
    author = {},
    institution = {Cybereason},
    title = {{Ransomware: The True Cost to Business}},
    subtitle = {{A Global Study on Ransomware Business Impact}},
    date = {2021},
    type = {report},
    url = {https://www.cybereason.com/hubfs/Ransomeware_True_Cost_e-book_NewBrand.pdf},
    urldate = {2022-02-28}
}

@report{cyberreason2022,
    author = {},
    institution = {Cybereason},
    title = {{Ransomware: The True Cost to Business 2022}},
    subtitle = {{A Global Study on Ransomware Business Impact}},
    date = {2022},
    type = {report},
    url = {https://www.cybereason.com/hubfs/dam/collateral/reports/Ransomware-The-True-Cost-to-Business-2022.pdf},
    urldate = {2022-02-28}
}

@article{gallagher2023,
    author = {Gallagher, Ryan},
    title = {{When Hackers Hobbled Ireland’s Hospitals, They Took Themselves Down, Too}},
    journaltitle = {Bloomberg Businessweek},
    date = {2023-02-03},
    url = {https://www.bloomberg.com/news/features/2023-02-03/ireland-hospital-ransomware-attack-fractured-hacker-group-conti},
    urldate = {2023-02-28}
}

@report{hse_report,
    author = {{PWC}},
    institution = {{HSE}},
    title = {{Conti cyber attack on the HSE}},
    subtitle = {{Independent Post Incident Review}},
    date = {2021-12-03},
    type = {report},
    url = {https://www.hse.ie/eng/services/publications/conti-cyber-attack-on-the-hse-full-report.pdf},
    urldate = {2023-02-28}
}

@online{miller19,
    author = {Miller, Matt},
    title = {{Trends, Challenges, and Strategic Shifts in the Software Vulnerability Mitigation Landscape}},
    organization = {{MSRC}},
    date = {2019-02-07},
    url = {https://www.youtube.com/watch?v=PjbGojjnBZQ},
    urldate = {2023-03-01}
}

@inproceedings{Cadar,
    author = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
    title = {{KLEE}: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs},
    booktitle = {Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation},
    year = {2008},
    pages = {209--224},
    url = {https://www.usenix.org/conference/osdi08/technical-sessions/presentation/cadar},
}


@inproceedings{fowze_mem_vul,
    author = {Fowze, Farhaan and Yavuz, Tuba},
    title = {Finding Memory Vulnerabilities in Protocol Stack Implementations Using Hybrid Program Analysis},
    year = {2021},
    isbn = {9781450387378},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3491371.3491372},
    doi = {10.1145/3491371.3491372},
    booktitle = {Proceedings of the 8th International Conference on Networking, Systems and Security},
    pages = {29–39},
    numpages = {11},
    keywords = {static analysis, reliability, vulnerability detection, IoT, symbolic execution, security},
    location = {Cox's Bazar, Bangladesh},
    series = {NSysS '21}
}

@InProceedings{path_explo,
    author = {Boonstoppel, Peter and Cadar, Cristian and Engler, Dawson},
    editor = {Ramakrishnan, C. R. and Rehof, Jakob},
    title = {RWset: Attacking Path Explosion in Constraint-Based Test Generation},
    booktitle = {Tools and Algorithms for the Construction and Analysis of Systems},
    year = {2008},
    publisher = {Springer Berlin Heidelberg},
    address = {Berlin, Heidelberg},
    pages = {351-366},
    isbn = {978-3-540-78800-3}
}

@inproceedings{bellard2005,
    author = {Fabrice Bellard},
    title = {{QEMU}, a Fast and Portable Dynamic Translator},
    booktitle = {2005 USENIX Annual Technical Conference (USENIX ATC 05)},
    date = {2005-04},
    address = {Anaheim, CA},
    url = {https://www.usenix.org/conference/2005-usenix-annual-technical-conference/qemu-fast-and-portable-dynamic-translator},
    urldate = {2023-04-24},
    publisher = {USENIX Association},
}

@online{egui,
    author = {Emil Ernerfeldt},
    title = {egui: an easy-to-use GUI in pure Rust},
    url = {https://github.com/emilk/egui/blob/3d6a15f442929ae14b942e2d5248f236e7ef9b2f/README.md},
    date = {2023-04-18},
    urldate = {2023-04-27},
}

@article{tarjan,
    Abstract = {The value of depth-first search or "backtracking" as a technique for solving graph problems is illustrated by two examples. An algorithm for finding the biconnected components of an undirected graph and an improved version of an algorithm for finding the strongly connected components of a directed graph are presented. The space and time requirements of both algorithms are bounded by k1V + k2E + k3 for some constants k1, k2, and k3, where V is the number of vertices and E is the number of edges of the graph being examined.},
    Author = {Tarjan, Robert},
    ISSN = {0272-4847},
    Journal = {12th Annual Symposium on Switching and Automata Theory (swat 1971), Switching and Automata Theory, 1971., 12th Annual Symposium on},
    Keywords = {Tree graphs, Computer science, Tail, Chemistry, Electrical engineering, Sociology, Information retrieval, TV, Erbium},
    Pages = {114 - 121},
    Title = {Depth-first search and linear graph algorithms.},
    URL = {https://search.ebscohost.com/login.aspx?direct=true&db=edseee&AN=edseee.4569669&site=eds-live&scope=site&authtype=guest&custid=s3911979&groupid=main&profile=eds},
    Year = {1971},
}

@article{sage,
    author = {Godefroid, Patrice and Levin, Michael Y. and Molnar, David},
    title = {SAGE: Whitebox Fuzzing for Security Testing: SAGE Has Had a Remarkable Impact at Microsoft.},
    year = {2012},
    issue_date = {January 2012},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {10},
    number = {1},
    issn = {1542-7730},
    url = {https://doi.org/10.1145/2090147.2094081},
    doi = {10.1145/2090147.2094081},
    abstract = {Most ACM Queue readers might think of "program verification research" as mostly theoretical with little impact on the world at large. Think again. If you are reading these lines on a PC running some form of Windows (like 93-plus percent of PC users--that is, more than a billion people), then you have been affected by this line of work--without knowing it, which is precisely the way we want it to be.},
    journal = {Queue},
    month = {jan},
    pages = {20–27},
    numpages = {8}
}

@inproceedings{symbolic_fuzz,
    author = {Vin{\c{c}}ont, Ya{\"e}lle and Bardin, S{\'e}bastien and Marcozzi, Micha{\"e}l},
    editor = {A{\"i}meur, Esma and Laurent, Maryline and Yaich, Reda and Dupont, Beno{\^i}t and Garcia-Alfaro, Joaquin"},
    title = {A Tight Integration of Symbolic Execution and Fuzzing (Short Paper)},
    booktitle = {Foundations and Practice of Security},
    year = {2022},
    publisher = {Springer International Publishing},
    address = {Cham},
    pages = {303-310},
    isbn = {978-3-031-08147-7}
}

@article{fuzzing,
    author = {Li, Jun and Zhao, Bodong and Zhang, Chao},
    year = {2018},
    month = {12},
    pages = {},
    title = {Fuzzing: a survey},
    volume = {1},
    journal = {Cybersecurity},
    doi = {10.1186/s42400-018-0002-y}
}

@article{challenges_fuzzing,
    author = {M. Boehme and C. Cadar and A. Roychoudhury},
    journal = {IEEE Software},
    title = {Fuzzing: Challenges and Reflections},
    year = {2021},
    volume = {38},
    number = {03},
    issn = {1937-4194},
    pages = {79-86},
    doi = {10.1109/MS.2020.3016773},
    publisher = {IEEE Computer Society},
    address = {Los Alamitos, CA, USA},
    month = {may}
}

@article{directed_greybox_fuzzing,
    title = {Sok: The progress, challenges, and perspectives of directed greybox fuzzing},
    author = {Wang, Pengfei and Zhou, Xu and Lu, Kai and Yue, Tai and Liu, Yingying},
    journal = {Challenges, and Perspectives of Directed Greybox Fuzzing},
    year = {2020}
}

@article{fault_prediction_vuln_pred,
    author = {Shin, Yonghee and Williams, Laurie},
    year = {2011},
    month = {02},
    pages = {},
    title = {Can traditional fault prediction models be used for vulnerability prediction?},
    volume = {18},
    journal = {Empirical Software Engineering},
    doi = {10.1007/s10664-011-9190-8}
}

@online{computer_security_cs161,
    author = "David Wagner and Nicholas Weaver and Peyrin Kao and Fuzail Shakir and Andrew Law and Nicholas Ngai",
    title = "Computer Security: CS 161 Course Textbook",
    date = {2023},
    urldate = {2023-05-08},
    url = {https://textbook.cs161.org/}
}

@article{alraddadicomprehensive,
    title={A comprehensive analysis of WannaCry: technical analysis, reverse engineering, and motivation},
    author={Alraddadi, Waleed and Sarvotham, Harshini}
}

@article{survey_symb_exc,
    author = {Baldoni, Roberto and Coppa, Emilio and D’elia, Daniele Cono and Demetrescu, Camil and Finocchi, Irene},
    title = {A Survey of Symbolic Execution Techniques},
    year = {2018},
    issue_date = {May 2019},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {51},
    number = {3},
    issn = {0360-0300},
    url = {https://doi.org/10.1145/3182657},
    doi = {10.1145/3182657},
    abstract = {Many security and software testing applications require checking whether certain properties of a program hold for any possible usage scenario. For instance, a tool for identifying software vulnerabilities may need to rule out the existence of any backdoor to bypass a program’s authentication. One approach would be to test the program using different, possibly random inputs. As the backdoor may only be hit for very specific program workloads, automated exploration of the space of possible inputs is of the essence. Symbolic execution provides an elegant solution to the problem, by systematically exploring many possible execution paths at the same time without necessarily requiring concrete inputs. Rather than taking on fully specified input values, the technique abstractly represents them as symbols, resorting to constraint solvers to construct actual instances that would cause property violations. Symbolic execution has been incubated in dozens of tools developed over the past four decades, leading to major practical breakthroughs in a number of prominent software reliability applications. The goal of this survey is to provide an overview of the main ideas, challenges, and solutions developed in the area, distilling them for a broad audience.},
    journal = {ACM Comput. Surv.},
    month = {may},
    articleno = {50},
    numpages = {39},
    keywords = {software testing, static analysis, concolic execution, Symbolic execution}
}

@article{symnav,
    author = {Baldoni, Roberto and Coppa, Emilio and D’elia, Daniele Cono and Demetrescu, Camil and Finocchi, Irene},
    title = {A Survey of Symbolic Execution Techniques},
    year = {2018},
    issue_date = {May 2019},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {51},
    number = {3},
    issn = {0360-0300},
    url = {https://doi.org/10.1145/3182657},
    doi = {10.1145/3182657},
    abstract = {Many security and software testing applications require checking whether certain properties of a program hold for any possible usage scenario. For instance, a tool for identifying software vulnerabilities may need to rule out the existence of any backdoor to bypass a program’s authentication. One approach would be to test the program using different, possibly random inputs. As the backdoor may only be hit for very specific program workloads, automated exploration of the space of possible inputs is of the essence. Symbolic execution provides an elegant solution to the problem, by systematically exploring many possible execution paths at the same time without necessarily requiring concrete inputs. Rather than taking on fully specified input values, the technique abstractly represents them as symbols, resorting to constraint solvers to construct actual instances that would cause property violations. Symbolic execution has been incubated in dozens of tools developed over the past four decades, leading to major practical breakthroughs in a number of prominent software reliability applications. The goal of this survey is to provide an overview of the main ideas, challenges, and solutions developed in the area, distilling them for a broad audience.},
    journal = {ACM Comput. Surv.},
    month = {may},
    articleno = {50},
    numpages = {39},
    keywords = {software testing, static analysis, concolic execution, Symbolic execution}
}
